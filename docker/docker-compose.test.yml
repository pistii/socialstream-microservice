# This docker-compose.yml lives in ./test/docker/
# All build paths are relative to THIS FILE

version: "3.8"

services: 
    #chat-service
    # chat-service:
    #     build:
    #      context: ../
    #      dockerfile: services/chat-service/Dockerfile
    #     container_name: chat-service
    #     ports: 
    #      - "5000:8080"
    #     environment:
    #      - ASPNETCORE_ENVIRONMENT=Development
    #      - ConnectionStrings__DefaultConnection=server=chatDb;user=root;password=jelszo;database=chat-service
    #     depends_on:
    #      - chatDb
    #     networks:
    #      - test-backend-network

    # chatDb:
    #     image: mysql:8.0
    #     container_name: chatDb
    #     environment:
    #      MYSQL_ROOT_PASSWORD: jelszo
    #      MYSQL_DATABASE: chat-service
    #     ports:
    #      - "4000:3306"
    #     volumes:
    #      - chat-mysql-data:/var/lib/mysql
    #      - ../services/chat-service/mysql-init:/docker-entrypoint-initdb.d
    #     networks:
    #      - test-backend-network

    #notification-service
    notification-service:
        build:
         context: ../
         dockerfile: services/notification-service/Dockerfile
        container_name: notification-service_test
        ports: 
         - "5001:8080"
        environment:
         - ASPNETCORE_ENVIRONMENT=Testing
         - ConnectionStrings__DefaultConnection=server=test-notificationDb;user=root;password=jelszo;database=notification-service
        depends_on:
         - test-notificationDb
        networks:
         - test-backend-network

    test-notificationDb:
        image: mysql:8.0
        container_name: test-notificationDb
        environment:
         MYSQL_ROOT_PASSWORD: jelszo
         MYSQL_DATABASE: notification-service
        ports:
         - "4001:3306"
        volumes:
         - notification-mysql-data:/var/lib/mysql
         - ../services/notification-service/mysql-init/test:/docker-entrypoint-initdb.d
        networks:
         - test-backend-network
    
    #user service
    user-service:
        build:
         context: ../
         dockerfile: services/user-service/Dockerfile
        container_name: user-service_test
        ports: 
         - "5002:8080"
        environment:
         - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
         - ASPNETCORE_ENVIRONMENT=Testing
         - ConnectionStrings__DefaultConnection=server=test-userDb;user=root;password=jelszo;database=user-service
        depends_on:
         - kafka
         - test-userDb
        networks:
         - test-backend-network

    test-userDb:
        image: mysql:8.0
        restart: always
        container_name: test-userDb
        environment:
            MYSQL_ROOT_PASSWORD: jelszo
            MYSQL_DATABASE: user-service
        ports:
         - "4002:3306"
        volumes:
            - user-mysql-data:/var/lib/mysql
            - ../services/user-service/mysql-init/test:/docker-entrypoint-initdb.d
        networks:
         - test-backend-network

    #friend service
    friend-service:
        build:
         context: ../
         dockerfile: services/friend-service/Dockerfile
        container_name: friend-service_test
        ports: 
         - "5003:8080"
        environment:
         - ASPNETCORE_URLS=http://+:8080;https://+:8080
         - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
         - ASPNETCORE_ENVIRONMENT=Testing
         - ConnectionStrings__DefaultConnection=server=test-friendDb;user=root;password=jelszo;database=friend-service
        depends_on:
         - test-friendDb
         - kafka
        networks:
         - test-backend-network

    test-friendDb:
        image: mysql:8.0
        restart: always
        container_name: test-friendDb
        environment:
         MYSQL_ROOT_PASSWORD: jelszo
         MYSQL_DATABASE: friend-service
        ports:
         - "4003:3306"
        volumes:
         - friend-mysql-data:/var/lib/mysql
         - ../services/friend-service/mysql-init/test:/docker-entrypoint-initdb.d
        networks:
         - test-backend-network
         
    #post service
    # post-service:
    #     build:
    #         context: ../
    #         dockerfile: services/post-service/Dockerfile
    #     container_name: post-service
    #     ports: 
    #         - "5004:8080"
    #     environment:
    #         - ASPNETCORE_ENVIRONMENT=Development
    #         - ConnectionStrings__DefaultConnection=server=postDb;user=root;password=jelszo;database=post-service
    #     depends_on:
    #         - postDb
    #     networks:
    #         - backend-network

    # postDb:
    #     image: mysql:8.0
    #     container_name: postDb
    #     environment:
    #         MYSQL_ROOT_PASSWORD: jelszo
    #         MYSQL_DATABASE: post-service
    #     ports:
    #         - "4004:3306"
    #     volumes:
    #         - post-mysql-data:/var/lib/mysql
    #         - ../services/post-service/mysql-init:/docker-entrypoint-initdb.d
    #     networks:
    #         - backend-network

    #gateway-api
    gateway-api:
        build:
         context: ../
         dockerfile: gateway/Dockerfile
        container_name: gateway-api_test
        ports:
        - "5050:8080"
        environment:
         - ASPNETCORE_ENVIRONMENT=Testing
        depends_on:
         - notification-service
         - user-service
         - friend-service
        # - chat-service
        # - post-service
        networks:
         - test-backend-network
    
    #grpc-service
    grpc-service:
        build:
            context: ../
            dockerfile: GrpcServices/Dockerfile
        container_name: grpc-service_test
        ports:
            - "5051:5051"
            - "5052:5052"
        networks:
         - test-backend-network
        volumes: 
         - ../GrpcServices/https:/https:ro
        environment:
          - ASPNETCORE_Kestrel__Endpoints__Https__Url=https://+:5052
          - ASPNETCORE_Kestrel__Endpoints__Https__Certificate__Path=/https/aspnetapp.pfx
          - ASPNETCORE_Kestrel__Endpoints__Https__Certificate__Password=hangya
    
    #kafka
    kafka:
        image: bitnami/kafka:latest
        container_name: kafka_test
        ports:
          - "9092:9092"
        environment:
          - KAFKA_CFG_PROCESS_ROLES=broker,controller
          - KAFKA_CFG_NODE_ID=1
          - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
          - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
          - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
          - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
          - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
          - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmno123456789
        networks:
            - test-backend-network
    
    #hosted services
    background-worker:
        build:
         context: ../
         dockerfile: services/background-worker-service/Dockerfile
        container_name: background-worker_test
        depends_on:
         - kafka
         - friend-service
        environment:
         - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        networks:
            - test-backend-network

networks:
 test-backend-network:

volumes:
 user-mysql-data:
 friend-mysql-data:
 notification-mysql-data: