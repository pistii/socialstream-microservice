syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "GrpcServices";

package user;

message UserRequest {
    string public_id = 1;
}

message UserRequestByPrivateId {
	int32 userId = 1;
}

message UserResponse {
	int32 userId = 1;
	string publicId = 2;
	string email = 3;
	google.protobuf.StringValue secondaryEmailAddress = 4;
	google.protobuf.Timestamp registrationDate = 5;
	bool isActivated = 6;
	google.protobuf.Timestamp lastOnline = 7;
	bool isOnlineEnabled = 8;
	
	PersonalResponse personal = 9;
	bool Success = 10;
}

message PersonalResponse {
	string firstName = 1;
	google.protobuf.StringValue middleName = 2;
	string lastName = 3;
	bool isMale = 4;
	google.protobuf.StringValue placeOfResidence = 5;
	google.protobuf.StringValue avatar = 6;
	google.protobuf.StringValue phoneNumber = 7;
	google.protobuf.Timestamp dateOfBirth = 8;
	google.protobuf.StringValue placeOfBirth = 9;
	google.protobuf.StringValue profession = 10;
	google.protobuf.StringValue workplace = 11;
	int32 publicStudyId = 12;
}


message UserBase {
	string publicId = 1;
	string avatar = 2;
	string name = 3;
}


message RepeatedChatPartnerIdsRequest {
	repeated string chatPartnerIds = 1;
	string userId = 2;
}

message RepeatedChatPartnersResponse {
	repeated PersonalResponse chatPartners = 1;
}

//Request by user ids
message GetAllUserRequest {
	repeated int32 userIds = 1;
}
message GetAllUserResponse {
	repeated UserResponse users = 1;
	bool success = 2;
}

message UserDetailsDtoResponse {
	string avatar = 1;
	string first_name = 2;
	string middle_name = 3;
	string last_name = 4;
	string public_id = 5;
	
	bool user_found = 6;
	bool success = 7;
}

message ReturnsUserPrivateId {
	int32 user_id = 1;
	bool user_found = 2;
}

message FoundUsersResponse {
	int32 foundUsers = 1;

}

service User {
  rpc GetUser (UserRequest) returns (UserResponse);
  rpc GetUserByIdRequest (UserRequestByPrivateId) returns (UserResponse);
  rpc GetMessagePartnersByUserId (RepeatedChatPartnerIdsRequest) returns (RepeatedChatPartnersResponse);
  rpc GetAllUserById (GetAllUserRequest) returns (GetAllUserResponse);
  rpc GetUserByPublicId (UserRequest) returns (UserDetailsDtoResponse);
  rpc GetUserPrivateIdByPublicId (UserRequest) returns (ReturnsUserPrivateId);
  
  
  rpc GetAllUserTest (UserRequest) returns (FoundUsersResponse);
}